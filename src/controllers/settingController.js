import redis from '../config/radisClient.js'
import mongoose from 'mongoose'
import { getInstanceDatabase } from '../config/db.js'
import { SettingSchema } from '../models/Setting.js'
import { pipnelineJoinPrefix, createSettings } from '../shared/setting.js'
import { getFormData } from '../utils/helper.js'
import { uploadImage, deleteImage } from '../utils/file-manager.js'

const { ObjectId } = mongoose.Types

/**
 * @desc Create setting manual
 * @route POST /setting
 * @access Private
 */
const createNewSettings = async (req, res) => {
  try {
    const settingData = await createSettings(req, '')

    if (!settingData) {
      return res.status(400).json({
        status: false,
        message: 'No setting found',
      })
    }

    return res.json({
      status: true,
      message: 'Success',
      data: settingData,
    })
  } catch (e) {
    return res.status(400).json({
      status: false,
      message: e,
    })
  }
}

/**
 * @desc Get setting
 * @route GET /setting
 * @access Private
 */
const getSettings = async (req, res) => {
  try {
    const dbName = req.headers.siteid
    const cachedSetting = await redis.get(`setting:${dbName}`)
    if (cachedSetting) {
      return res.json({
        status: true,
        message: 'Success',
        data: JSON.parse(cachedSetting),
      })
    }
    const connection = await getInstanceDatabase(req)
    const SettingModel = connection.model('Setting', SettingSchema)
    const settingFound = await SettingModel.aggregate(pipnelineJoinPrefix)

    if (!settingFound.length) {
      return res.status(400).json({
        status: false,
        message: 'No setting found',
      })
    }

    const settingData = settingFound[0]

    if (settingData) {
      await redis.set(
        `setting:${dbName}`,
        JSON.stringify(settingData),
        'EX',
        60 * 60 * 24
      ) // Cache 1 ‡πÄ‡∏î‡∏∑‡∏≠‡∏ô.
    }

    return res.json({
      status: true,
      message: 'Success',
      data: settingData,
    })
  } catch (e) {
    return res.status(400).json({
      status: false,
      message: e,
    })
  }
}

/**
 * @desc Get Update setting info
 * @route PATCH /setting/info/:id
 * @access Private
 */
const updateInfo = async (req, res) => {
  try {
    const { id } = req.params
    const connection = await getInstanceDatabase(req)
    const SettingModel = connection.model('Setting', SettingSchema)
    const settingData = await SettingModel.findByIdAndUpdate(
      id,
      {
        $set: { info: req.body },
      },
      { new: true }
    )

    if (!settingData) {
      return res.status(400).json({
        status: false,
        message: 'Setting update failure',
      })
    }

    // NOTE: Clear cacheSetting by dbName.
    const dbName = req.headers.siteid
    redis.del(`setting:${dbName}`)

    return res.json({
      status: true,
      message: 'Success',
      data: settingData,
    })
  } catch (e) {
    return res.status(500).json({
      status: false,
      message: e.message,
    })
  }
}

/**
 * @desc Get Update setting register type
 * @route PATCH /setting/register/:id
 * @access Private
 */
const updateRegisterType = async (req, res) => {
  try {
    const { id } = req.params
    const { registerType } = req.body

    const connection = await getInstanceDatabase(req)
    const SettingModel = connection.model('Setting', SettingSchema)
    const settingData = await SettingModel.findByIdAndUpdate(
      id,
      {
        $set: { registerType },
      },
      { new: true }
    )

    if (!settingData) {
      return res.status(400).json({
        status: false,
        message: 'Setting update failure',
      })
    }

    // NOTE: Clear cacheSetting by dbName.
    const dbName = req.headers.siteid
    redis.del(`setting:${dbName}`)

    return res.json({
      status: true,
      message: 'Success',
      data: settingData,
    })
  } catch (e) {
    return res.status(500).json({
      status: false,
      message: e.message,
    })
  }
}

const addBanner = async (req, res) => {
  try {
    const { id } = req.params
    const dbName = req.headers.siteid
    const { fields, files } = await getFormData(req)
    // üìå ‡∏î‡∏∂‡∏á `banners` ‡πÄ‡∏î‡∏¥‡∏°‡∏à‡∏≤‡∏Å DB
    const connection = await getInstanceDatabase(req)
    const SettingModel = connection.model('Setting', SettingSchema)
    const settingFound = await SettingModel.aggregate(pipnelineJoinPrefix)
    if (!settingFound.length) {
      return res.status(400).json({
        status: false,
        message: 'No setting found',
      })
    }

    const oldBanners = settingFound[0].banners || []

    // üìå ‡∏à‡∏≥‡∏Å‡∏±‡∏î banners ‡πÄ‡∏ß‡πá‡∏ö‡∏•‡∏∞ 10 ‡∏£‡∏π‡∏õ
    if (oldBanners.length >= 10) {
      return res.status(400).json({
        status: false,
        message: 'You can only have 12 banners',
      })
    }

    const uploadedFiles = files.images || [] // üîπ ‡∏£‡∏π‡∏õ‡∏ó‡∏µ‡πà‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏°‡∏≤‡πÉ‡∏´‡∏°‡πà

    // üìå ‡∏™‡∏£‡πâ‡∏≤‡∏á `Map` ‡∏Ç‡∏≠‡∏á banners ‡πÄ‡∏Å‡πà‡∏≤ (‡πÉ‡∏ä‡πâ image ‡πÄ‡∏õ‡πá‡∏ô key)
    const oldBannersMap = new Map(oldBanners.map((b) => [b.image, b]))

    let newImages = []

    // üìå ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏π‡∏õ‡πÉ‡∏´‡∏°‡πà
    for (const file of uploadedFiles) {
      const { newImageName } = await uploadImage(file, dbName, 'banners')
      newImages.push(newImageName)
    }

    const isActive = JSON.parse(fields.isActive)

    oldBanners.push({ image: newImages[0], isActive })

    // üìå ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏£‡∏π‡∏õ‡∏ó‡∏µ‡πà‡∏™‡πà‡∏á‡∏°‡∏≤‡πÉ‡∏´‡∏°‡πà ‡πÄ‡∏õ‡πá‡∏ô‡∏£‡∏π‡∏õ‡πÄ‡∏Å‡πà‡∏≤‡∏´‡∏£‡∏∑‡∏≠‡∏£‡∏π‡∏õ‡πÉ‡∏´‡∏°‡πà
    // let imgIndex = 0
    // banners.forEach((banner) => {
    //   if (!oldBannersMap.has(banner.image)) {
    //     // üîπ ‡∏ñ‡πâ‡∏≤ `image` ‡πÑ‡∏°‡πà‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô `oldBannersMap` ‡πÅ‡∏õ‡∏•‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏£‡∏π‡∏õ‡πÉ‡∏´‡∏°‡πà ‚Üí ‡πÉ‡∏ä‡πâ‡∏ä‡∏∑‡πà‡∏≠‡πÉ‡∏´‡∏°‡πà
    //     banner.image = newImages[imgIndex]
    //     imgIndex++
    //   }
    // })

    // üìå ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å banners ‡∏•‡∏á MongoDB
    const settingData = await SettingModel.findByIdAndUpdate(
      id,
      {
        $set: { banners: oldBanners },
      },
      { new: true, upsert: true }
    )

    if (!settingData) {
      return res.status(400).json({
        status: false,
        message: 'Add banner failure',
      })
    }

    // NOTE: Clear cacheSetting by dbName.
    redis.del(`setting:${dbName}`)

    return res.json({
      status: true,
      message: 'Success',
      data: settingData,
    })
  } catch (e) {
    return res.status(500).json({
      status: false,
      message: e.message,
    })
  }
}

const updateBanners = async (req, res) => {
  try {
    const { id } = req.params
    const { banners } = req.body
    const dbName = req.headers.siteid

    // üìå ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó banners ‡∏•‡∏á MongoDB
    const connection = await getInstanceDatabase(req)
    const SettingModel = connection.model('Setting', SettingSchema)
    const settingData = await SettingModel.findByIdAndUpdate(
      id,
      {
        $set: { banners },
      },
      { new: true, upsert: true }
    )

    if (!settingData) {
      return res.status(400).json({
        status: false,
        message: 'Banners update failure',
      })
    }

    // NOTE: Clear cacheSetting by dbName.
    redis.del(`setting:${dbName}`)

    return res.json({
      status: true,
      message: 'Success',
      data: settingData,
    })
  } catch (e) {
    return res.status(500).json({
      status: false,
      message: e.message,
    })
  }
}

const deleteBanner = async (req, res) => {
  try {
    const { id } = req.params
    const { banners, deleteById } = req.body
    const dbName = req.headers.siteid

    // üìå ‡∏•‡∏ö ‡πÑ‡∏ü‡∏•‡πå‡∏£‡∏π‡∏õ banner ‡∏ï‡∏≤‡∏° deleteById ‡∏ó‡∏µ‡πà‡∏™‡πà‡∏á‡∏°‡∏≤
    const foundIndex = banners.findIndex((banner) => banner._id === deleteById)
    if (foundIndex > -1) {
      const { image } = banners[foundIndex]
      await deleteImage(image, dbName, 'banners')
    }

    // üìå ‡∏•‡∏ö banner ‡∏ï‡∏≤‡∏° deleteById ‡∏ó‡∏µ‡πà‡∏™‡πà‡∏á‡∏°‡∏≤‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å array banners
    const newBanners = banners.filter((banner) => banner._id !== deleteById)

    // üìå ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å banners ‡∏•‡∏á MongoDB
    const connection = await getInstanceDatabase(req)
    const SettingModel = connection.model('Setting', SettingSchema)
    const settingData = await SettingModel.findByIdAndUpdate(
      id,
      {
        $set: { banners: newBanners },
      },
      { new: true, upsert: true }
    )

    if (!settingData) {
      return res.status(400).json({
        status: false,
        message: 'Deelete banner failure',
      })
    }

    // NOTE: Clear cacheSetting by dbName.
    redis.del(`setting:${dbName}`)

    return res.json({
      status: true,
      message: 'Success',
      data: settingData,
    })
  } catch (e) {
    return res.status(500).json({
      status: false,
      message: e.message,
    })
  }
}

export default {
  getSettings,
  createNewSettings,
  updateInfo,
  updateRegisterType,
  addBanner,
  updateBanners,
  deleteBanner,
}
